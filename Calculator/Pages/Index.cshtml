@page
@model IndexModel
@{
    ViewData["Title"] = "Welcome to the universal calculator";
}

<h2>@ViewData["Title"]</h2>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    #header {
        background-color: #403030;
        padding: 10px;
        margin-bottom: 20px;
        text-align: center;
    }

        #header h3 {
            color: white;
        }

    button {
        padding: 10px;
        font-size: 14px;
        margin: 5px;
        border: none;
        cursor: pointer;
        border-radius: 4px;
    }

        button:hover {
            background-color: #45a049;
        }

    #content {
        max-width: 600px;
        margin: 0 auto;
    }

    .panel {
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        background-color: #f9f9f9;
        display: none;
    }

    .checkbox-inline {
        margin-left: 5px;
        font-size: 16px; 
        color: #333; 
        border: 1px solid #ccc; 
        padding: 3px 5px; 
        border-radius: 3px; 
    }


    label {
        display: block;
        margin-bottom: 5px;
    }

    input, select {
        padding: 5px;
        width: 100%;
        margin-bottom: 10px;
    }

    #calculator button {
        width: 100px;
        height: 60px;
        font-size: 18px;
    }

    #equationSolver button {
        background-color: #008CBA;
        color: white;
    }

        #equationSolver button:hover {
            background-color: #0077A3;
        }

    .keypad {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
    }
</style>



<div id="header">
    <h3>Select an Option:</h3>
    <button onclick="toggleTab('graph')">Graph Plotter</button>
    <button onclick="toggleTab('calculator')">Calculator</button>
    <button onclick="toggleTab('equationSolver')">Equation Solver</button>
    <button onclick="toggleTab('unitConverter')">Unit Converter</button>
</div>



<div id="content">
    <div id="graph" style="display: none;">
        <label for="mathExpression">Enter Math Expression:</label>
        <input type="text" id="mathExpression" />
        <button onclick="plotGraph()">Plot Graph</button>
        <div id="plot"></div>
    </div>

    <div id="calculator" style="display: none;">
        <label for="expression">Enter Expression:</label>
        <output id="calculatorResult"></output>
        <input type="text" id="expression" />

        <div class="keypad">
            <button onclick="appendToExpression('1')">1</button>
            <button onclick="appendToExpression('2')">2</button>
            <button onclick="appendToExpression('3')">3</button>
            <button onclick="appendToExpression('+')">+</button>
            <button onclick="appendToExpression('4')">4</button>
            <button onclick="appendToExpression('5')">5</button>
            <button onclick="appendToExpression('6')">6</button>
            <button onclick="appendToExpression('-')">-</button>
            <button onclick="appendToExpression('7')">7</button>
            <button onclick="appendToExpression('8')">8</button>
            <button onclick="appendToExpression('9')">9</button>
            <button onclick="appendToExpression('*')">x</button>
            <button onclick="appendToExpression('.')">.</button>
            <button onclick="appendToExpression('0')">0</button>
            <button onclick="appendToExpression('/')">/</button>
            <button onclick="appendToExpression('(')">(</button>
            <button onclick="appendToExpression(')')">)</button>
            <button onclick="calculate()">=</button>
        </div>

        <div class="keypad">
            <button onclick="appendToExpression('sin(')">sin</button>
            <button onclick="appendToExpression('cos(')">cos</button>
            <button onclick="appendToExpression('tan(')">tan</button>
            <button onclick="appendToExpression('log(')">log</button>
        </div>
    </div>

    <div id="equationSolver" style="display: none;">
        <div>
            <label for="a">Enter coefficient a:</label>
            <input type="number" id="a" step="any">
        </div>
        <div>
            <label for="b">Enter coefficient b:</label>
            <input type="number" id="b" step="any">
        </div>

        <div style="display: flex; align-items: center;">
            <label for="includeC">Include coefficient c (for quadratic equation)</label>
            <input type="checkbox" id="includeC" onchange="toggleThirdField()" class="checkbox-inline">
        </div>

        <div id="cField" style="display: none;">
            <label for="c">Enter coefficient c:</label>
            <input type="number" id="c" step="any">
        </div>
        <button onclick="solveEquation()">Solve Equation</button>
        <div id="result"></div>
        <div id="steps"></div>
    </div>

    <div id="unitConverter" style="display: none;">
        <label for="unitInput">Enter the value:</label>
        <input type="number" id="unitInput" />
        <select id="inputUnit" onchange="updateOutputUnits()">
            <optgroup label="Length">
                <option value="meter">Meter</option>
                <option value="centimeter">Centimeter</option>
                <option value="millimeter">Millimeter</option>
            </optgroup>
            <optgroup label="Mass">
                <option value="kilogram">Kilogram</option>
                <option value="gram">Gram</option>
                <option value="milligram">Milligram</option>
                <option value="ton">Ton</option>
            </optgroup>
            <optgroup label="Area">
                <option value="squareMeter">Square Meter</option>
                <option value="squareCentimeter">Square Centimeter</option>
                <option value="hectare">Hectare</option>
            </optgroup>
            <optgroup label="Time">
                <option value="second">Second</option>
                <option value="minute">Minute</option>
                <option value="hour">Hour</option>
            </optgroup>
            <optgroup label="Size">
                <option value="cubicMeter">Cubic Meter</option>
                <option value="liter">Liter</option>
                <option value="milliliter">Milliliter</option>
            </optgroup>
        </select>
        <label for="outputUnit">Output unit:</label>
        <select id="outputUnit"></select>
        <button onclick="convertUnits()">Convert</button>
        <div id="conversionResult"></div>
    </div>

</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/mathjs-expression-parser@2.0.3/dist/mathjs-expression-parser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.6.0/math.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>

       function appendToExpression(value) {
       var expressionField = document.getElementById('expression');
       expressionField.value += value;
    }

       function clearExpression() {
       var expressionField = document.getElementById('expression');
       expressionField.value = '';
    }

        function toggleTab(tabName) {
            var graphTab = document.getElementById('graph');
            var calculatorTab = document.getElementById('calculator');
            var equationSolverTab = document.getElementById('equationSolver');
            var unitConverterTab = document.getElementById('unitConverter'); 

            var plotDiv = document.getElementById('plot');
            var calculatorResultDiv = document.getElementById('calculatorResult');
            var equationResultDiv = document.getElementById('equationResult');
            var conversionResultDiv = document.getElementById('conversionResult'); 

            if (tabName === 'graph') {
                graphTab.style.display = 'block';
                calculatorTab.style.display = 'none';
                equationSolverTab.style.display = 'none';
                unitConverterTab.style.display = 'none'; 
                calculatorResultDiv.style.display = 'none';
                equationResultDiv.style.display = 'none';
                conversionResultDiv.style.display = 'none'; 
                plotDiv.style.display = 'block';
            } else if (tabName === 'calculator') {
                graphTab.style.display = 'none';
                calculatorTab.style.display = 'block';
                equationSolverTab.style.display = 'none';
                unitConverterTab.style.display = 'none'; 
                calculatorResultDiv.style.display = 'block';
                equationResultDiv.style.display = 'none';
                conversionResultDiv.style.display = 'none'; 
                plotDiv.style.display = 'none';
            } else if (tabName === 'equationSolver') {
                graphTab.style.display = 'none';
                calculatorTab.style.display = 'none';
                equationSolverTab.style.display = 'block';
                unitConverterTab.style.display = 'none'; 
                calculatorResultDiv.style.display = 'none';
                equationResultDiv.style.display = 'block';
                conversionResultDiv.style.display = 'none'; 
                plotDiv.style.display = 'none';
            } else if (tabName === 'unitConverter') {
                graphTab.style.display = 'none';
                calculatorTab.style.display = 'none';
                equationSolverTab.style.display = 'none';
                unitConverterTab.style.display = 'block';
                calculatorResultDiv.style.display = 'none';
                equationResultDiv.style.display = 'none';
                conversionResultDiv.style.display = 'block';
                plotDiv.style.display = 'none';
            }
        }



        function addToExpression(value) {
            var expressionField = document.getElementById('mathExpression');
            expressionField.value += value;
        }

        function clearExpression() {
            var expressionField = document.getElementById('mathExpression');
            expressionField.value = '';
        }

        function plotGraph() {
            var expression = document.getElementById('mathExpression').value;

            if (expression.trim() === "") {
                alert("Please enter a valid math expression.");
                return;
            }

            try {
                var parsedExpression = math.parse(expression);
            } catch (error) {
                alert("Error parsing the expression.");
                return;
            }

            var hasX = parsedExpression.filter(node => node.name === 'x').length > 0;
            var hasY = parsedExpression.filter(node => node.name === 'y').length > 0;

            var xValues = [];
            var yValuesX = [];
            var yValuesY = [];

            for (var i = -20; i <= 20; i += 0.1) {
                xValues.push(i);
            }

            for (var i = 0; i < xValues.length; i++) {
                try {
                    var resultX = hasX ? parsedExpression.evaluate({ x: xValues[i] }) : 0;
                    var resultY = hasY ? parsedExpression.evaluate({ y: xValues[i] }) : 0;
                    yValuesX.push(resultX);
                    yValuesY.push(resultY);
                } catch (error) {
                    alert("Error evaluating the expression.");
                    return;
                }
            }

            var traces = [];

            if (hasX) {
                traces.push({
                    x: xValues,
                    y: yValuesX,
                    type: 'scatter',
                    mode: 'lines',
                    name: 'Graph X'
                });
            }

            if (hasY) {
                traces.push({
                    x: yValuesY,
                    y: xValues,
                    type: 'scatter',
                    mode: 'lines',
                    name: 'Graph Y'
                });
            }

            var layout = {
                title: 'Math Expression Plot',
                xaxis: { title: 'X-axis', range: [-40, 40] },
                yaxis: { title: 'Y-axis', range: [-40, 40] }
            };

            Plotly.newPlot('plot', traces, layout);
        }

        function calculate() {
                var expression = document.getElementById('expression').value;

                try {
                    var result = math.evaluate(expression);
                    document.getElementById('calculatorResult').textContent = "Result: " + result;
                } catch (error) {
                    alert("Error evaluating the expression.");
                }

                if (isNaN(num1)) {
                    alert("Please enter a valid number for Number 1.");
                    return;
                }

                var result;

                switch (operation) {
                    case 'add':
                        result = num1 + num2;
                        break;
                    case 'subtract':
                        result = num1 - num2;
                        break;
                    case 'multiply':
                        result = num1 * num2;
                        break;
                    case 'divide':
                        if (num2 === 0) {
                            alert("Cannot divide by zero.");
                            return;
                        }
                        result = num1 / num2;
                        break;
                    case 'power':
                        result = Math.pow(num1, num2);
                        break;
                    case 'root':
                        result = Math.sqrt(num1);
                        break;
                    case 'percentage':
                        result = (num1 * num2) / 100;
                        break;
                    case 'sin':
                        result = Math.sin(num1);
                        break;
                    case 'cos':
                        result = Math.cos(num1);
                        break;
                    case 'tan':
                        result = Math.tan(num1);
                        break;
                    case 'log':
                        result = Math.log10(num1);
                        break;
                    default:
                        alert("Invalid operation selected.");
                        return;
                }

                document.getElementById('calculatorResult').innerHTML = "Result: " + result;
            }




        function addToExpression(value) {
            var equationInput = document.getElementById('equationInput');
            equationInput.value += value;
        }

        function clearExpression() {
            var equationInput = document.getElementById('equationInput');
            equationInput.value = '';
        }

        function toggleThirdField() {
            var cField = document.getElementById('cField');
            cField.style.display = document.getElementById('includeC').checked ? 'block' : 'none';
        }

        function solveEquation() {
            var a = parseFloat(document.getElementById('a').value);
            var b = parseFloat(document.getElementById('b').value);
            var c = parseFloat(document.getElementById('c').value);

            var isQuadratic = document.getElementById('includeC').checked;

            try {
                var result;
                if (isNaN(a) || isNaN(b)) {
                    throw new Error('Coefficients a and b must be numbers.');
                }
                if (isQuadratic && isNaN(c)) {
                    throw new Error('Coefficient c must be provided for quadratic equation.');
                }
                if (isQuadratic) {
                    result = solveQuadraticEquation(a, b, c);
                } else {
                    result = solveLinearEquation(a, b);
                }

                clearSteps();

                result.forEach(function (step) {
                    showStepExplanation(step);
                });

                var solution = result[result.length - 1]; 
                

            } catch (error) {
                document.getElementById('result').innerText = 'Error: ' + error.message;
            }
        }


        function solveLinearEquation(a, b) {
            var steps = [];
            steps.push('Step 1: Rearrange the equation if necessary to isolate the variable term.');
            steps.push('Step 2: Solve for x: x = -b / a');
            var solution = -b / a;
            steps.push('Solution: x = ' + solution);
            return steps;
        }

        function solveQuadraticEquation(a, b, c) {
            var steps = [];
            steps.push('Step 1: Rewrite the quadratic equation in the standard form ax^2 + bx + c = 0.');
            steps.push('Step 2: Calculate the discriminant D = b^2 - 4ac.');
            steps.push('Step 3: Determine the nature of roots based on the value of the discriminant: ');
            steps.push('   1. If D > 0, the equation has two distinct real roots.');
            steps.push('   2. If D = 0, the equation has one real root (a repeated root).');
            steps.push('   3. If D < 0, the equation has two complex roots.');
            var discriminant = b * b - 4 * a * c;
            if (discriminant > 0) {
                var x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
                var x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
                steps.push('Step 4: Apply the quadratic formula to find the roots: ');
                steps.push('   1. x1 = (-b + √D) / (2a)');
                steps.push('   2. x2 = (-b - √D) / (2a)');
                steps.push('Root 1: x = ' + x1);
                steps.push('Root 2: x = ' + x2);
            } else if (discriminant === 0) {
                var x = -b / (2 * a);
                steps.push('Step 4: Apply the quadratic formula to find the repeated root: x = -b / (2a)');
                steps.push('Root: x = ' + x);
            } else {
                steps.push('Step 4: Since the discriminant is negative, the equation has no real roots.');
            }
            return steps;
        }


        function clearSteps() {
            var stepsDiv = document.getElementById('steps');
            stepsDiv.innerHTML = ''; 
        }

        function showStepExplanation(step) {
            var stepsDiv = document.getElementById('steps');

            var stepElement = document.createElement('p');
            stepElement.textContent = step;

            stepsDiv.appendChild(stepElement);
        }



        function convertUnits() {
            var inputValue = parseFloat(document.getElementById('unitInput').value);
            var inputUnit = document.getElementById('inputUnit').value;
            var outputUnit = document.getElementById('outputUnit').value;

            if (isNaN(inputValue)) {
                alert("Please enter a valid number for the input value.");
                return;
            }

            var result = performConversion(inputValue, inputUnit, outputUnit);

            document.getElementById('conversionResult').innerHTML = "Result: " + result + " " + outputUnit;
        }

        function updateOutputUnits() {
            var inputUnit = document.getElementById('inputUnit').value;
            var outputUnitSelect = document.getElementById('outputUnit');
            outputUnitSelect.innerHTML = "";

            var outputUnits = [];

            switch (inputUnit) {
                case 'meter':
                    outputUnits = ['centimeter', 'millimeter'];
                    break;
                case 'centimeter':
                    outputUnits = ['meter', 'millimeter'];
                    break;
                case 'millimeter':
                    outputUnits = ['meter', 'centimeter'];
                    break;
                case 'kilogram':
                    outputUnits = ['gram', 'milligram', 'ton'];
                    break;
                case 'gram':
                    outputUnits = ['kilogram', 'milligram', 'ton'];
                    break;
                case 'milligram':
                    outputUnits = ['kilogram', 'gram', 'ton'];
                    break;
                case 'ton':
                    outputUnits = ['kilogram', 'gram', 'milligram'];
                    break;
                case 'second':
                    outputUnits = ['minute', 'hour'];
                    break;
                case 'minute':
                    outputUnits = ['second', 'hour'];
                    break;
                case 'hour':
                    outputUnits = ['second', 'minute'];
                    break;
                case 'squareMeter':
                    outputUnits = ['squareCentimeter', 'hectare'];
                    break;
                case 'squareCentimeter':
                    outputUnits = ['squareMeter', 'hectare'];
                    break;
                case 'hectare':
                    outputUnits = ['squareMeter', 'squareCentimeter'];
                    break;
                case 'liter':
                    outputUnits = ['milliliter', 'cubicMeter'];
                    break;
                case 'milliliter':
                    outputUnits = ['liter', 'cubicMeter'];
                    break;
                case 'cubicMeter':
                    outputUnits = ['liter', 'milliliter'];
                    break;
            }

            outputUnits.forEach(function (unit) {
                var option = document.createElement('option');
                option.value = unit;
                option.text = unit;
                outputUnitSelect.appendChild(option);
            });
        }

        function performConversion(value, inputUnit, outputUnit) {
            if (isNaN(value)) {
                alert("Please enter a valid number for the input value.");
                return;
            }

            // Конвертація одиниць вимірювання довжини
            if (inputUnit === 'meter' && outputUnit === 'centimeter') {
                return value * 100; 
            } else if (inputUnit === 'meter' && outputUnit === 'millimeter') {
                return value * 1000; 
            } else if (inputUnit === 'centimeter' && outputUnit === 'meter') {
                return value / 100; 
            } else if (inputUnit === 'centimeter' && outputUnit === 'millimeter') {
                return value * 10; 
            } else if (inputUnit === 'millimeter' && outputUnit === 'meter') {
                return value / 1000; 
            } else if (inputUnit === 'millimeter' && outputUnit === 'centimeter') {
                return value / 10;

            // Конвертація одиниць вимірювання ваги
            } else if (inputUnit === 'kilogram' && outputUnit === 'gram') {
                return value * 1000; 
            } else if (inputUnit === 'kilogram' && outputUnit === 'milligram') {
                return value * 1000000;
            } else if (inputUnit === 'kilogram' && outputUnit === 'ton') {
                return value / 1000;
            } else if (inputUnit === 'gram' && outputUnit === 'kilogram') {
                return value / 1000;
            } else if (inputUnit === 'gram' && outputUnit === 'milligram') {
                return value * 1000;
            } else if (inputUnit === 'gram' && outputUnit === 'ton') {
                return value / 1000000;
            } else if (inputUnit === 'milligram' && outputUnit === 'kilogram') {
                return value / 1000000; 
            } else if (inputUnit === 'milligram' && outputUnit === 'gram') {
                return value / 1000;
            } else if (inputUnit === 'milligram' && outputUnit === 'ton') {
                return value / 1000000000;
            } else if (inputUnit === 'ton' && outputUnit === 'kilogram') {
                return value * 1000;
            } else if (inputUnit === 'ton' && outputUnit === 'gram') {
                return value * 1000000;
            } else if (inputUnit === 'ton' && outputUnit === 'milligram') {
                return value * 1000000000;

            // Конвертація одиниць вимірювання часу
            } else if (inputUnit === 'second' && outputUnit === 'minute') {
                return value / 60; 
            } else if (inputUnit === 'second' && outputUnit === 'hour') {
                return value / 3600; 
            } else if (inputUnit === 'minute' && outputUnit === 'second') {
                return value * 60;
            } else if (inputUnit === 'minute' && outputUnit === 'hour') {
                return value / 60; 
            } else if (inputUnit === 'hour' && outputUnit === 'second') {
                return value * 3600;
            } else if (inputUnit === 'hour' && outputUnit === 'minute') {
                return value * 60; 

            // Конвертація одиниць вимірювання площі
            } else if (inputUnit === 'squareMeter' && outputUnit === 'squareCentimeter') {
                return value * 10000; 
            } else if (inputUnit === 'squareMeter' && outputUnit === 'hectare') {
                return value / 10000; 
            } else if (inputUnit === 'squareCentimeter' && outputUnit === 'squareMeter') {
                return value / 10000; 
            } else if (inputUnit === 'squareCentimeter' && outputUnit === 'hectare') {
                return value / 100000000; 
            } else if (inputUnit === 'hectare' && outputUnit === 'squareMeter') {
                return value * 10000; 
            } else if (inputUnit === 'hectare' && outputUnit === 'squareCentimeter') {
                return value * 100000000; 

            // Конвертація одиниць вимірювання об'єму
            } else if (inputUnit === 'liter' && outputUnit === 'milliliter') {
                return value * 1000; 
            } else if (inputUnit === 'liter' && outputUnit === 'cubicMeter') {
                return value / 1000; 
            } else if (inputUnit === 'milliliter' && outputUnit === 'liter') {
                return value / 1000; 
            } else if (inputUnit === 'milliliter' && outputUnit === 'cubicMeter') {
                return value / 1000000; 
            } else if (inputUnit === 'cubicMeter' && outputUnit === 'liter') {
                return value * 1000; 
            } else if (inputUnit === 'cubicMeter' && outputUnit === 'milliliter') {
                return value * 1000000; 

            } else {
                alert("Unable to convert between the selected units.");
                return;
            }
        }
    </script>
}