@page
@model IndexModel
@{
    ViewData["Title"] = "Graph Plotting";
}

<h2>@ViewData["Title"]</h2>

<style>
    #mathExpression {
        width: 400px;
        height: 30px; 
    }

    #mathKeyboard button {
        width: 60px; 
        height: 30px; 
        margin: 5px; 
    }

    #plot {
        width: 900px; 
        height: 700px;
    }
</style>


<div>
    <label for="mathExpression">Enter Math Expression:</label>
    <input type="text" id="mathExpression"/>
    <button onclick="plotGraph()">Plot Graph</button>
</div>


<div id="plot"></div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/mathjs-expression-parser@2.0.3/dist/mathjs-expression-parser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.6.0/math.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        function addToExpression(value) {
            var expressionField = document.getElementById('mathExpression');
            expressionField.value += value;
        }

        function clearExpression() {
            var expressionField = document.getElementById('mathExpression');
            expressionField.value = '';
        }
    </script>
    <script>
        function plotGraph() {
            var expression = document.getElementById('mathExpression').value;

            if (expression.trim() === "") {
                alert("Please enter a valid math expression.");
                return;
            }

            try {
                var parsedExpression = math.parse(expression);
            } catch (error) {
                alert("Error parsing the expression.");
                return;
            }

            var hasX = parsedExpression.filter(node => node.name === 'x').length > 0;
            var hasY = parsedExpression.filter(node => node.name === 'y').length > 0;

            var xValues = [];
            var yValuesX = [];
            var yValuesY = [];

            for (var i = -20; i <= 20; i += 0.1) {
                xValues.push(i);
            }

            for (var i = 0; i < xValues.length; i++) {
                try {
                    var resultX = hasX ? parsedExpression.evaluate({ x: xValues[i] }) : 0;
                    var resultY = hasY ? parsedExpression.evaluate({ y: xValues[i] }) : 0;
                    yValuesX.push(resultX);
                    yValuesY.push(resultY);
                } catch (error) {
                    alert("Error evaluating the expression.");
                    return;
                }
            }

            var traces = [];

            if (hasX) {
                traces.push({
                    x: xValues,
                    y: yValuesX,
                    type: 'scatter',
                    mode: 'lines',
                    name: 'Graph X'
                });
            }

            if (hasY) {
                traces.push({
                    x: yValuesY,
                    y: xValues,
                    type: 'scatter',
                    mode: 'lines',
                    name: 'Graph Y'
                });
            }

            var layout = {
                title: 'Math Expression Plot',
                xaxis: { title: 'X-axis', range: [-40, 40] },
                yaxis: { title: 'Y-axis', range: [-40, 40] }
            };

            Plotly.newPlot('plot', traces, layout);
        }
    </script>

}
